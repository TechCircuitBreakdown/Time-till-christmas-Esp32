#include <TimeLib.h>
#include <WiFi.h>
#include <WiFiUdp.h>
#include <TM1637Display.h>

const char ssid1[] = "";    // your first network SSID (name)
const char pass1[] = "";       // your first network password

const char ssid2[] = "";   // your second network SSID (name)
const char pass2[] = "";  // your second network password

// NTP Servers:
static const char ntpServerName[] = "us.pool.ntp.org";

const int timeZone = 1;     // Central European Time

WiFiUDP Udp;
unsigned int localPort = 8888;  // local port to listen for UDP packets

const int NTP_PACKET_SIZE = 48; // NTP time is in the first 48 bytes of the message
byte packetBuffer[NTP_PACKET_SIZE]; // buffer to hold incoming & outgoing packets

TM1637Display display(2, 0);  // Pins for TM1637 (CLK, DIO)

time_t getNtpTime();
void displayDaysTillChristmas();
void sendNTPpacket(IPAddress &address);
void connectToWiFi(const char* ssid1, const char* pass1, const char* ssid2, const char* pass2);

void setup()
{
  Serial.begin(9600);
  while (!Serial);
  delay(250);
  Serial.println("TimeNTP Example");

  // Connect to WiFi networks
  connectToWiFi(ssid1, pass1, ssid2, pass2);

  Serial.print("IP number assigned by DHCP is ");
  Serial.println(WiFi.localIP());
  Serial.println("Starting UDP");
  Udp.begin(localPort);
  Serial.print("Local port: ");
  Serial.println(localPort);
  Serial.println("waiting for sync");
  setSyncProvider(getNtpTime);
  setSyncInterval(300);

  // Initialize the TM1637 display
  display.setBrightness(0x0f);  // Set brightness (0x00 to 0x0f)

  displayDaysTillChristmas();  // Display days till Christmas on startup
}

void loop()
{
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi connection lost. Reconnecting...");
    connectToWiFi(ssid1, pass1, ssid2, pass2);
    setSyncProvider(getNtpTime);
    setSyncInterval(300);
  }

  Serial.print("Current time: ");
  Serial.println(now());

  displayDaysTillChristmas();

  delay(60000);  // Delay for 1 minute
}

void displayDaysTillChristmas()
{
  // Calculate the days remaining until Christmas (assuming Christmas is on December 24th)
  tmElements_t christmasDate;
  christmasDate.Year = year() - 1970; // Correct the year value
  christmasDate.Month = 12;
  christmasDate.Day = 25; //The 25 is under a day so it will display 00 on the 24th meaning its the date +1 day  
  christmasDate.Hour = 0;
  christmasDate.Minute = 0;
  christmasDate.Second = 0;

  time_t christmasTime = makeTime(christmasDate);
  time_t currentTime = now();
  int daysRemaining = (christmasTime - currentTime) / SECS_PER_DAY;

  // If Christmas has already passed this year, increment the year
  if (daysRemaining < 0) {
    christmasDate.Year++;
    christmasTime = makeTime(christmasDate);
    daysRemaining = (christmasTime - currentTime) / SECS_PER_DAY;
  }

  // For debugging, print days remaining to the Serial Monitor
  Serial.print("Days till Christmas: ");
  Serial.println(daysRemaining);

  // Display the days remaining on the TM1637 display
  display.showNumberDec(daysRemaining, true);
}

time_t getNtpTime()
{
  IPAddress ntpServerIP;

  while (Udp.parsePacket() > 0) {
    Udp.flush();  // Clear any existing packets to avoid blocking
  }

  Serial.println("Transmit NTP Request");

  // Try the first NTP server
  WiFi.hostByName(ntpServerName, ntpServerIP);
  Serial.print(ntpServerName);
  Serial.print(": ");
  Serial.println(ntpServerIP);
  sendNTPpacket(ntpServerIP);
  uint32_t beginWait = millis();
  while (millis() - beginWait < 1500) {
    int size = Udp.parsePacket();
    if (size >= NTP_PACKET_SIZE) {
      Serial.println("Receive NTP Response");
      Udp.read(packetBuffer, NTP_PACKET_SIZE);
      unsigned long secsSince1900;
      secsSince1900 =  (unsigned long)packetBuffer[40] << 24;
      secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
      secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
      secsSince1900 |= (unsigned long)packetBuffer[43];
      return secsSince1900 - 2208988800UL + timeZone * SECS_PER_HOUR;
    }
  }

  // If the first NTP server fails, try the second one
  WiFi.hostByName(ntpServerName, ntpServerIP);
  Serial.print(ntpServerName);
  Serial.print(": ");
  Serial.println(ntpServerIP);
  sendNTPpacket(ntpServerIP);
   beginWait = millis();
  while (millis() - beginWait < 1500) {
    int size = Udp.parsePacket();
    if (size >= NTP_PACKET_SIZE) {
      Serial.println("Receive NTP Response");
      Udp.read(packetBuffer, NTP_PACKET_SIZE);
      unsigned long secsSince1900;
      secsSince1900 =  (unsigned long)packetBuffer[40] << 24;
      secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
      secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
      secsSince1900 |= (unsigned long)packetBuffer[43];
      return secsSince1900 - 2208988800UL + timeZone * SECS_PER_HOUR;
    }
  }

  Serial.println("No NTP Response :-(");
  return 0;
}

void sendNTPpacket(IPAddress &address)
{
  memset(packetBuffer, 0, NTP_PACKET_SIZE);
  packetBuffer[0] = 0b11100011;
  packetBuffer[1] = 0;
  packetBuffer[2] = 6;
  packetBuffer[3] = 0xEC;
  packetBuffer[12] = 49;
  packetBuffer[13] = 0x4E;
  packetBuffer[14] = 49;
  packetBuffer[15] = 52;
  Udp.beginPacket(address, 123);
  Udp.write(packetBuffer, NTP_PACKET_SIZE);
  Udp.endPacket();
}

void connectToWiFi(const char* ssid1, const char* pass1, const char* ssid2, const char* pass2)
{
  Serial.print("Connecting to ");
  Serial.println(ssid1);

  int attempts = 0;

  while (attempts < 20) {
    WiFi.begin(ssid1, pass1);

    int connectAttempts = 0;
    while (WiFi.status() != WL_CONNECTED && connectAttempts < 10) {
      delay(500);
      Serial.print(".");
      connectAttempts++;
    }

    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("\nWiFi connected");
      Serial.print("IP address: ");
      Serial.println(WiFi.localIP());
      return;  // Exit the function if connected successfully
    }

    // If the first network fails, try the second network
    Serial.println("\nFailed to connect to the first network. Trying the second network.");
    WiFi.begin(ssid2, pass2);

    connectAttempts = 0;
    while (WiFi.status() != WL_CONNECTED && connectAttempts < 10) {
      delay(500);
      Serial.print(".");
      connectAttempts++;
    }

    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("\nWiFi connected");
      Serial.print("IP address: ");
      Serial.println(WiFi.localIP());
      return;  // Exit the function if connected successfully
    }

    Serial.println("\nFailed to connect to both networks. Retrying...");
    attempts++;
  }

  Serial.println("\nFailed to connect after multiple attempts. Please check your credentials.");
  while (1) {
    delay(1000); // Halt the program
  }
}
